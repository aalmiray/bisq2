buildscript {
    repositories {
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath 'org.openjfx:javafx-plugin:0.0.10'
    }
}

def requiredJavaVersion = 16
def javafxSdkProperty = 'bisq.javafx.sdk'

configure(subprojects) {
    apply plugin: 'java-base'

    repositories {
        mavenCentral()
    }

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(requiredJavaVersion)
        }
    }
}

configure(project(':api')) {
    apply plugin: 'java-library'

    dependencies {
        api 'io.reactivex.rxjava3:rxjava:3.0.13'
        implementation 'com.squareup.okhttp3:okhttp:4.9.1'
    }
}

configure(project(':core')) {
    apply plugin: 'application'

    dependencies {
        implementation project(':api')
        implementation 'com.sparkjava:spark-core:2.9.3'
        implementation 'com.google.code.gson:gson:2.8.7'
    }

    application {
        mainClass = 'bisq.core.app.BisqDaemon'
        applicationName = 'bisqd'
    }

    build.dependsOn installDist
}

configure(project(':cli')) {
    apply plugin: 'application'

    dependencies {
        implementation project(':api')
        implementation 'info.picocli:picocli:4.6.1'
        testImplementation project(':core')
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.1'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    }

    application {
        mainClass = 'bisq.cli.app.BisqCommandLine'
        applicationName = 'bisq'
    }

    tasks.named('test') {
        useJUnitPlatform()
    }

    // see https://picocli.info/autocomplete.html
    task generateBashCompletion(type: JavaExec) {
        classpath = sourceSets.main.runtimeClasspath
        mainClass = 'picocli.AutoComplete'
        args 'bisq.cli.app.BisqCommandLine$BisqCommand',
                '--force',
                '--completionScript=../bisq-completion.bash'
        javaLauncher = javaToolchains.launcherFor {
            languageVersion = JavaLanguageVersion.of(requiredJavaVersion)
        }
    }

    build.dependsOn installDist, generateBashCompletion
}

configure(project(':fx')) {
    apply plugin: 'application'
    apply plugin: 'org.openjfx.javafxplugin'

    javafx {
        if (project.hasProperty(javafxSdkProperty))
            sdk = project.getProperty(javafxSdkProperty)
        else
            version = '16'
        modules = ['javafx.controls']
    }

    application {
        mainClass = 'bisq.fx.app.BisqFX'
        applicationName = 'bisqfx'
    }

    dependencies {
        implementation project(':api')
    }

    startScripts {
        defaultJvmOpts = [ '--add-modules=javafx.controls' ]
        if (project.hasProperty(javafxSdkProperty))
            defaultJvmOpts += "--module-path=${project.getProperty(javafxSdkProperty)}/lib"
    }

    build.dependsOn installDist
}
