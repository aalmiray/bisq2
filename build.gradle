plugins {
    id 'com.google.osdetector'
    id 'com.palantir.git-version' apply false
    id 'org.openjfx.javafxplugin' apply false
    id 'org.beryx.runtime'        apply false
}

ext.platform = osdetector.os == 'osx' ? 'mac' : osdetector.os == 'windows' ? 'win' : osdetector.os

configure(subprojects) {
    apply plugin: 'java-library'
    apply plugin: 'com.palantir.git-version'

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation 'org.slf4j:slf4j-api:1.7.31'
        implementation 'ch.qos.logback:logback-core:1.2.3'
        implementation 'ch.qos.logback:logback-classic:1.2.3'
        testImplementation "com.google.truth:truth:1.1.3"
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.1'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    }

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(requiredJavaVersion)
        }
    }

    test {
        useJUnitPlatform()
    }
}

configure(project(':api')) {
    // no additional configuration
}

configure(project(':client')) {
    dependencies {
        api project(':api')
        implementation 'com.squareup.okhttp3:okhttp:4.9.1'
        implementation 'com.google.code.gson:gson:2.8.7'
    }
}

configure(project(':core')) {
    dependencies {
        api project(':api')
        implementation 'com.sparkjava:spark-core:2.9.3'
        implementation 'com.google.code.gson:gson:2.8.7'
    }
}

configure(project(':app')) {
    dependencies {
        api 'info.picocli:picocli:4.6.1'
    }
}

configure(project(':app:daemon')) {
    apply plugin: 'application'
    apply plugin: 'org.beryx.runtime'

    dependencies {
        implementation project(':app')
        implementation project(':client')
        implementation project(':core')
    }

    application {
        mainClass = 'bisq.app.daemon.BisqDaemon'
        applicationName = 'bisqd'
    }

    processResources {
        expand(name: applicationName, version: gitVersion())
    }

    runtime {
        imageDir = file("$buildDir/images/bisqd-${platform}")
        imageZip = file("$buildDir/distributions/bisqd-${platform}.zip")
        options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
        launcher {
            //name = 'bisqd'
            noConsole = true
        }
    }

    assemble.dependsOn(runtimeZip)

    build.dependsOn installDist
}

configure(project(':app:cli')) {
    apply plugin: 'application'
    apply plugin: 'org.beryx.runtime'

    dependencies {
        implementation project(':app')
        implementation project(':client')
        implementation 'com.google.code.gson:gson:2.8.7'
        testImplementation project(':core')
    }

    application {
        mainClass = 'bisq.app.cli.BisqCli'
        applicationName = 'bisq'
    }

    // see https://picocli.info/autocomplete.html
    task generateBashCompletion(type: JavaExec) {
        classpath = sourceSets.main.runtimeClasspath
        mainClass = 'picocli.AutoComplete'
        args 'bisq.app.cli.BisqCommand',
                '--force',
                "--completionScript=${project.rootDir}/bisq-completion.bash"
        javaLauncher = javaToolchains.launcherFor {
            languageVersion = JavaLanguageVersion.of(requiredJavaVersion)
        }
    }

    processResources {
        expand(name: "bisq cli", version: gitVersion())
    }

    runtime {
        imageDir = file("$buildDir/images/bisq-${platform}")
        imageZip = file("$buildDir/distributions/bisq-${platform}.zip")
        options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
        launcher {
            //name = 'bisq'
            noConsole = true
        }
    }

    assemble.dependsOn(runtimeZip)

    build.dependsOn installDist, generateBashCompletion
}

configure(project(':app:fx')) {
    apply plugin: 'application'
    apply plugin: 'org.openjfx.javafxplugin'
    apply plugin: 'org.beryx.runtime'

    javafx {
        if (project.hasProperty(javafxSdkProperty))
            sdk = project.getProperty(javafxSdkProperty)
        else
            version = '16'
        modules = ['javafx.controls']
    }

    application {
        mainClass = 'bisq.app.fx.BisqFX'
        applicationName = 'bisqfx'
    }

    dependencies {
        implementation project(':app')
        implementation project(':client')
        implementation project(':core')
    }

    startScripts {
        defaultJvmOpts = [ '--add-modules=javafx.controls' ]
        if (project.hasProperty(javafxSdkProperty))
            defaultJvmOpts += "--module-path=${project.getProperty(javafxSdkProperty)}/lib"
    }

    // see https://picocli.info/autocomplete.html
    task generateBashCompletion(type: JavaExec) {
        classpath = sourceSets.main.runtimeClasspath
        mainClass = 'picocli.AutoComplete'
        args 'bisq.app.fx.BisqFXCommand',
            '--force',
            "--completionScript=${project.rootDir}/bisqfx-completion.bash"
        javaLauncher = javaToolchains.launcherFor {
            languageVersion = JavaLanguageVersion.of(requiredJavaVersion)
        }
    }

    processResources {
        expand(name: applicationName, version: gitVersion())
    }

    runtime {
        imageDir = file("$buildDir/images/bisqfx-${platform}")
        imageZip = file("$buildDir/distributions/bisqfx-${platform}.zip")
        options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
        launcher {
            //name = 'bisqfx'
            noConsole = true
        }
    }

    assemble.dependsOn(runtimeZip)

    build.dependsOn installDist, generateBashCompletion
}
